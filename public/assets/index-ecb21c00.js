(function(){const s=document.createElement("link").relList;if(s&&s.supports&&s.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const a of o)if(a.type==="childList")for(const i of a.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&r(i)}).observe(document,{childList:!0,subtree:!0});function n(o){const a={};return o.integrity&&(a.integrity=o.integrity),o.referrerPolicy&&(a.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?a.credentials="include":o.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function r(o){if(o.ep)return;o.ep=!0;const a=n(o);fetch(o.href,a)}})();const g={apiURI:location.href+"api"},e={settings:{block:document.querySelector(".settings"),pullSettingsBtn:document.querySelector("#pull-settings-btn"),welcome:{textarea:document.querySelector(".settings__welcome textarea"),pushBtn:document.querySelector("#push-welcome-btn")},regist:{playerNickname:document.querySelector(".settings__regist_players_form input[name=nickname]"),playerTime:document.querySelector(".settings__regist_players_form input[name=time]"),addPlayerBtn:document.querySelector(".settings__regist_players_form input[type=submit]"),listBlock:document.querySelector(".settings__regist_players_list"),pushBtn:document.querySelector("#push-regist-btn")},tracks:{block:document.querySelector(".settings__tracks_block"),textarea:document.querySelector(".settings__tracks_block textarea"),pushBtn:document.querySelector("#push-tracks-btn")},pointsSystem:{inputsBlock:document.querySelector(".settings__points-system_inputs"),saveBtn:document.querySelector("#save-points-system-btn")}},tournament:{block:document.querySelector(".tournament"),counts:{selectorForm:document.querySelector(".tournament__count_selector_form"),selectElems:document.querySelectorAll(".tournament__count_selector_form select"),inputElems:document.querySelectorAll(".tournament__count_selector_form_racer input[type=number]"),saveBtn:document.querySelector("#save-leaderboard-btn")},leaderboard:{trackInfo:document.querySelector(".tournament__leaderboard_track-info"),playersList:document.querySelector(".tournament__leaderboard_list"),pushBtn:document.querySelector("#push-leaderboard-bth")}},startTournamentBtn:document.querySelector("#start-tournament-btn"),finishTournamentBtn:document.querySelector("#finish-tournament-btn")},l=(t,s)=>{const r=`
        padding: 10px;
        font-size: 16px;
        background: ${t?"rgba(50,255,50,.8)":"rgba(255,50,50,.8)"};
        position: fixed;
        border-radius: 3px;
        right: 10px;
        top: 10px;
    `,o=document.createElement("div");o.innerHTML=`<span style="${r}">${s}</span>`,document.body.appendChild(o),setTimeout(()=>document.body.removeChild(o),t?1e3:3e3)},k=async(t,s)=>{await fetch(g.apiURI+"/settings",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({key:t,value:s})}).then(n=>{n.ok&&n.status===200?(l(!0,"Saved!"),console.log(n.status)):l(!1,"Error save!")}).catch(n=>{console.log(n)})},b=t=>{const s={},n=Object.entries(t).sort((r,o)=>o[1]-r[1]);for(let r=0;r<n.length;r++)s[n[r][0]]=n[r][1];return s};let u={},c=[];e.settings.regist.addPlayerBtn.onclick=t=>{if(t.preventDefault(),!!e.settings.regist.playerNickname.value){localStorage.RegisteredPlayersTime&&(u=JSON.parse(localStorage.RegisteredPlayersTime)),u[e.settings.regist.playerNickname.value]=e.settings.regist.playerTime.value,u=T(u),localStorage.RegisteredPlayersTime=JSON.stringify(u),e.settings.regist.listBlock.innerHTML="";for(const[s,n]of Object.entries(u))e.settings.regist.listBlock.innerHTML+=`
            <div class="registered_players">
                <span class="registered_players-nickname">${s}</span>
                <span class="registered_players-time">${n}</span>
                <input type="button" value="-" class="removePlayerBtn">
            </div>`;for(const s of document.querySelectorAll(".removePlayerBtn"))s.onclick=function(){S(this)};e.settings.regist.playerNickname.value="",c=Object.keys(u),c.length>=2&&(e.settings.regist.pushBtn.disabled=!1,localStorage.Tracks&&localStorage.Tracks.split(",").length>=2&&(e.startTournamentBtn.disabled=!1))}};function S(t){const s=t.parentElement.querySelector(".registered_players-nickname").innerText;t.parentElement.remove();const n=JSON.parse(localStorage.RegisteredPlayersTime);delete n[s],c=Object.keys(n),localStorage.RegisteredPlayersTime=JSON.stringify(n),delete u[s],c.length<2&&(e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0)}e.settings.regist.pushBtn.onclick=()=>{c.length<2||fetch(g.apiURI+"/regist",{method:"POST",headers:{"Content-Type":"application/json"},body:localStorage.RegisteredPlayersTime}).then(t=>{console.log(t.status),t.ok&&t.status===200?l(!0,"Registration pushed!"):l(!1,"Error push!")}).catch(t=>{console.log(t)})};function T(t){const s={},n=Object.entries(t).sort((r,o)=>r[1].toString().localeCompare(o[1]));for(let r=0;r<n.length;r++)s[n[r][0]]=n[r][1];return s}if(localStorage.RegisteredPlayersTime){c=Object.keys(JSON.parse(localStorage.RegisteredPlayersTime)),e.settings.regist.listBlock.innerHTML="";for(const[t,s]of Object.entries(JSON.parse(localStorage.RegisteredPlayersTime)))e.settings.regist.listBlock.innerHTML+=`
            <div class="registered_players">
                <span class="registered_players-nickname">${t}</span>
                <span class="registered_players-time">${s}</span>
                <input type="button" value="-" class="removePlayerBtn">
            </div>`;for(const t of document.querySelectorAll(".removePlayerBtn"))t.onclick=function(){S(this)}}localStorage.lastLeaderboardPushed?localStorage.lastLeaderboardPushed==="true"?(e.tournament.leaderboard.pushBtn.disabled=!0,e.tournament.counts.saveBtn.disabled=!1):(e.tournament.leaderboard.pushBtn.disabled=!1,e.tournament.counts.saveBtn.disabled=!0):e.tournament.leaderboard.pushBtn.disabled=!0;e.tournament.leaderboard.pushBtn.onclick=()=>{const t=b(JSON.parse(localStorage.RegisteredPlayersPoints));if(localStorage.EventPlayersPoint){const r=JSON.parse(localStorage.EventPlayersPoint);for(const[o,a]of Object.entries(t))t[o]=[a,"+"+r[o]]}else for(const[r,o]of Object.entries(t))t[r]=[o,""];const s=JSON.parse(localStorage.Tracks),n=+localStorage.TrackNumber;fetch(g.apiURI+"/event",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({trackNumber:n,trackName:s[n-1],players:t})}).then(r=>{console.log(r.status),r.ok&&r.status===200?(l(!0,"Event pushed!"),e.tournament.leaderboard.pushBtn.disabled=!0,localStorage.lastLeaderboardPushed=!0,n>=s.length?e.tournament.counts.saveBtn.disabled=!0:e.tournament.counts.saveBtn.disabled=!1):(l(!1,"Error push!"),e.tournament.leaderboard.pushBtn.disabled=!1,e.tournament.counts.saveBtn.disabled=!0)}).catch(r=>{console.log(r)})};function p(t){if(e.tournament.leaderboard.playersList.innerHTML="",e.tournament.leaderboard.trackInfo.innerHTML="",!t)return;let s="";localStorage.TrackNumber?+localStorage.TrackNumber===JSON.parse(localStorage.Tracks).length&&(s='<span style="color:rgba(255,50,50,.8)">Last</span>',e.tournament.counts.saveBtn.disabled=!0):localStorage.TrackNumber=0;const n=JSON.parse(localStorage.Tracks),r=+localStorage.TrackNumber;e.tournament.leaderboard.trackInfo.innerHTML=`Track #${r} ${s}<br>${n[r-1]}`;const o=b(t);let a=1;for(const[i,m]of Object.entries(o))e.tournament.leaderboard.playersList.innerHTML+=`
            <div class="tournament__leaderboard_list_player">
                <span class="tournament__leaderboard_list_player-position">${a++}</span>
                <span class="tournament__leaderboard_list_player-nickname">${i}</span>
                <span class="tournament__leaderboard_list_player-points">${m}</span>
            </div>
            `}let d={1:12,2:9,3:7,4:5,5:3,6:2,7:1,8:0};localStorage.PointsSystem?(d=JSON.parse(localStorage.PointsSystem),f(d)):(f(d),localStorage.PointsSystem=JSON.stringify(d));function f(t){e.settings.pointsSystem.inputsBlock.innerHTML="";for(const[s,n]of Object.entries(t)){e.settings.pointsSystem.inputsBlock.innerHTML+=`
            <div>
                <span>${s}:</span>
                <input type="text" name=${s} value=${n} class="pointsSystemInput">
            </div>
            `;for(const r of document.querySelectorAll(".pointsSystemInput"))r.oninput=function(){d[this.name]=+this.value}}}e.settings.pointsSystem.saveBtn.onclick=()=>{localStorage.PointsSystem=JSON.stringify(d),l(!0,"Points saved!"),k("PointsSystem",d),e.settings.pointsSystem.inputsBlock.parentElement.style.background="rgba(0,0,0,.155)",setTimeout(()=>{e.settings.pointsSystem.inputsBlock.parentElement.style.background="rgba(0,0,0,.1)"},200)};let y=[];function h(t){y=t;const s={};for(const n of y)s[n]=0;p(s);for(const n of e.tournament.counts.selectElems){const r=n.parentNode.querySelector("input[type=number]");let o="<option>...</option>";for(const i of y)o+=`<option>${i}</option>`;n.innerHTML=o;let a=JSON.parse(localStorage.PointsSystem)[n.getAttribute("st")];r.value=a,r.oninput=function(){a=+this.value,s[n.value]=a},n.onchange=function(){for(const i of e.tournament.counts.selectElems)for(const m of i.children)m.innerText===this.value&&(m.style.display="none");s[this.value]=a}}e.tournament.counts.saveBtn.onclick=function(n){n.preventDefault(),this.disabled=!0,e.tournament.leaderboard.pushBtn.disabled=!1,localStorage.lastLeaderboardPushed="0",localStorage.TrackNumber?localStorage.TrackNumber=+localStorage.TrackNumber+1:localStorage.TrackNumber="";for(const o of e.tournament.counts.selectElems){const a=o.parentNode.querySelector("input[type=number]");a.value=d[o.getAttribute("st")];let i="<option>...</option>";for(const m of y)i+=`<option>${m}</option>`;o.innerHTML=i}const r={};if(localStorage.RegisteredPlayersPoints){const o=JSON.parse(localStorage.RegisteredPlayersPoints);for(const[a,i]of Object.entries(o))r[a]=i+s[a];localStorage.RegisteredPlayersPoints=JSON.stringify(r),localStorage.EventPlayersPoint=JSON.stringify(s),p(r);for(const a of Object.keys(s))s[a]=0}else localStorage.RegisteredPlayersPoints=JSON.stringify(s),p(s);localStorage.TrackNumber&&+localStorage.TrackNumber>=JSON.parse(localStorage.Tracks).length&&(this.disabled=!0)}}const P=t=>{if(t.RegisteredPlayersTime){e.settings.regist.listBlock.innerHTML="";for(const[s,n]of Object.entries(t.RegisteredPlayersTime))e.settings.regist.listBlock.innerHTML+=`
                <div class="registered_players">
                    <span class="registered_players-nickname">${s}</span>
                    <span class="registered_players-time">${n}</span>
                    <input type="button" value="-" class="removePlayerBtn">
                </div>`;for(const s of document.querySelectorAll(".removePlayerBtn"))s.onclick=function(){S(this)};Object.keys(t.RegisteredPlayersTime).length<2?(e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0):(e.settings.regist.pushBtn.disabled=!1,localStorage.Tracks&&t.Tracks.length>2&&(e.startTournamentBtn.disabled=!1))}else e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0;if(t.Tracks){e.settings.tracks.textarea.value="";for(const s of t.Tracks)e.settings.tracks.textarea.value+=s+`
`}t.PointsSystem&&f(t.PointsSystem)},v=`:trophy: **Стартует новый турнир!**
Ниже будет табло турнирных трасс и табло игроков допущенных к турниру.
:warning: Следите за их состоянием: они будут обновляться до начала турнира!
:trophy: **A new tournament is starting!**
The board of the tournament tracks and the board of the players admitted to the tournament will be shown below.
:warning: Keep an eye on their status: they will be updated before the start of the tournament! `;e.settings.welcome.textarea.value=v;e.settings.welcome.textarea.oninput=function(){e.settings.welcome.pushBtn.disabled=this.value.length<10};e.settings.welcome.pushBtn.onclick=()=>{e.settings.welcome.textarea.value&&fetch(g.apiURI+"/welcome",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:e.settings.welcome.textarea.value})}).then(t=>{console.log(t.status),t.ok&&t.status===200?l(!0,"Welcome pushed!"):l(!1,"Error push!")}).catch(t=>{console.log(t)})};e.settings.tracks.textarea.value=`Kempton Docks
Ironhorse & Coast
Valley & State
South Fortuna Circuit
Seaside Interchange`;if(localStorage.Tracks){const t=JSON.parse(localStorage.Tracks);e.settings.tracks.textarea.value="";for(const s of t)e.settings.tracks.textarea.value+=s+`
`}else{const t=e.settings.tracks.textarea.value.split(`
`);localStorage.Tracks=JSON.stringify(t)}e.settings.tracks.pushBtn.onclick=async()=>{const t=e.settings.tracks.textarea.value.split(`
`).filter(s=>s!=="");localStorage.Tracks=JSON.stringify(t),await fetch(g.apiURI+"/tracks",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(s=>{console.log(s.status),s.ok&&s.status===200?l(!0,"Tracks pushed!"):l(!1,"Error push!")}).catch(s=>{console.log(s)}),t.length>=2&&c.length>=2?e.startTournamentBtn.disabled=!1:e.startTournamentBtn.disabled=!0,e.settings.tracks.block.style.background="rgba(0,0,0,.155)",setTimeout(()=>{e.settings.tracks.block.style.background="rgba(0,0,0,.1)"},200)};const B=async()=>{const t=await fetch(g.apiURI+"/settings"),s=await t.json();if(t.ok&&t.status===200)return s;throw new Error(`Error, status: ${t.status}`)};e.settings.pullSettingsBtn.onclick=()=>{B().then(t=>{console.log(t);for(const[s,n]of Object.entries(t))localStorage[s]=JSON.stringify(n);P(t),l(!0,"Up to dated!")}).catch(t=>{l(!1,"Error pull!"),console.log(t)})};e.startTournamentBtn.onclick=()=>{if(c.length<2)return;confirm("Registration will be terminated. Continue?")&&(h(c),e.tournament.block.style.display="block",e.settings.block.style.display="none")};e.finishTournamentBtn.onclick=()=>{if(confirm("Finish the tournament?")){let s={};localStorage.RegisteredPlayersPoints&&(s=b(JSON.parse(localStorage.RegisteredPlayersPoints))),fetch(g.apiURI+"/finish",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}).then(n=>{if(n.ok&&n.status===200){localStorage.clear(),p(!1),e.settings.regist.listBlock.innerHTML="",e.settings.tracks.textarea.value="",e.tournament.counts.saveBtn.disabled=!1,e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0;for(const r of e.tournament.counts.selectElems)r.innerHTML="";e.settings.block.style.display="flex",e.tournament.block.style.display="none",l(!0,"Finish pushed!"),console.log(n.status,"finished")}else l(!1,"Error push!")}).catch(n=>{console.log(n)})}};localStorage.RegisteredPlayersTime?Object.keys(JSON.parse(localStorage.RegisteredPlayersTime)).length<2?(e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0):(e.settings.regist.pushBtn.disabled=!1,localStorage.Tracks&&JSON.parse(localStorage.Tracks).length>2&&(e.startTournamentBtn.disabled=!1)):(e.settings.regist.pushBtn.disabled=!0,e.startTournamentBtn.disabled=!0);localStorage.RegisteredPlayersPoints&&(e.settings.block.style.display="none",e.tournament.block.style.display="block",h(c),p(JSON.parse(localStorage.RegisteredPlayersPoints)));
